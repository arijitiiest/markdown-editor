{"version":3,"sources":["components/Header/Header.js","components/Buttons/Buttons.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Buttons","inputFile","useRef","onClick","e","current","click","icon","faFileUpload","color","size","type","id","ref","style","display","onChange","preventDefault","reader","FileReader","onload","a","text","target","result","onFileUpload","readAsText","files","readFile","onDownload","faDownload","onSave","faSave","onRead","faBook","App","useState","mdCode","setMdCode","readMode","setReadMode","useEffect","localStorage","getItem","console","log","alert","setItem","value","dangerouslySetInnerHTML","__html","Remarkable","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mTAceA,G,YAVA,SAAAC,GACX,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,SAAf,6B,sCCwEGC,G,MAnEC,SAACF,GACf,IAAMG,EAAYC,iBAAO,MAgBzB,OACE,yBAAKH,UAAU,WACb,yBAAKA,UAAU,SAASI,QAhBF,SAACC,GACzBH,EAAUI,QAAQC,UAgBd,kBAAC,IAAD,CACEP,UAAU,YACVQ,KAAMC,IACNC,MAAM,UACNC,KAAK,OAEP,2BACEC,KAAK,OACLC,GAAG,OACHC,IAAKZ,EACLa,MAAO,CAAEC,QAAS,QAClBC,SAAU,SAACZ,GAAD,OAxBD,SAACA,GAChBA,EAAEa,iBACF,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAP,uCAAgB,WAAOhB,GAAP,eAAAiB,EAAA,sDACRC,EAAOlB,EAAEmB,OAAOC,OACtB1B,EAAM2B,aAAaH,GAFL,2CAAhB,sDAIAJ,EAAOQ,WAAWtB,EAAEmB,OAAOI,MAAM,IAiBVC,CAASxB,MAE5B,0BAAML,UAAU,mBAAhB,WAEF,yBAAKA,UAAU,SAASI,QAASL,EAAM+B,YACrC,kBAAC,IAAD,CACE9B,UAAU,YACVQ,KAAMuB,IACNrB,MAAM,UACNC,KAAK,OAEP,0BAAMX,UAAU,mBAAhB,aAEF,yBAAKA,UAAU,SAASI,QAASL,EAAMiC,QACrC,kBAAC,IAAD,CACEhC,UAAU,YACVQ,KAAMyB,IACNvB,MAAM,UACNC,KAAK,OAEP,0BAAMX,UAAU,mBAAhB,iBAGF,yBAAKA,UAAU,SAASI,QAASL,EAAMmC,QACrC,kBAAC,IAAD,CACElC,UAAU,YACVQ,KAAM2B,IACNzB,MAAM,UACNC,KAAK,OAEP,0BAAMX,UAAU,mBAAhB,oBCQOoC,EA1EH,SAACrC,GAAW,IAAD,EACOsC,mBAC1B,+CAFmB,mBACdC,EADc,KACNC,EADM,OAIWF,oBAAS,GAJpB,mBAIdG,EAJc,KAIJC,EAJI,KAsCrB,OANAC,qBAAU,WACJC,aAAaC,QAAQ,YACvBL,EAAUI,aAAaC,QAAQ,cAEhC,CAACL,IAGF,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACET,WA3BoB,WACxBe,QAAQC,IAAI,aA2BRpB,aAxBsB,SAACH,GAC3BgB,EAAUhB,IAwBNS,OArBgB,WACpBe,MAAM,wBACNJ,aAAaK,QAAQ,UAAWV,IAoB5BJ,OAjBgB,WACpBO,GAAaD,MAkBX,yBAAKxC,UAAU,OACb,yBAAKA,UAAU,aACZwC,EACC,GAEA,yBAAKxC,UAAU,SACb,yBAAKA,UAAU,cAAf,SACA,8BACEA,UAAU,aACViB,SAlDc,SAACZ,GAC3BkC,EAAUlC,EAAEmB,OAAOyB,QAkDPA,MAAOX,KAIb,yBAAKtC,UAAU,UACb,yBAAKA,UAAU,cAAf,YACA,yBACEkD,wBApDH,CAAEC,QADE,IAAIC,KACKC,OAAOf,IAqDjBtC,UAAU,qBC5DJsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.b5b42ca9.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Header.css\";\n\nconst Header = props => {\n    return (\n        <div className=\"Header\">\n            <div className=\"Title\">\n                # LIVE MARKDOWN EDITOR\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import React, { useRef } from \"react\";\nimport {} from \"@fortawesome/free-brands-svg-icons\";\nimport {\n  faDownload,\n  faSave,\n  faFileUpload,\n  faBook,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport \"./Buttons.css\";\n\nconst Buttons = (props) => {\n  const inputFile = useRef(null);\n\n  const fileUploadHandler = (e) => {\n    inputFile.current.click();\n  };\n\n  const readFile = (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const text = e.target.result;\n      props.onFileUpload(text);\n    };\n    reader.readAsText(e.target.files[0]);\n  };\n\n  return (\n    <div className=\"Buttons\">\n      <div className=\"Button\" onClick={fileUploadHandler}>\n        <FontAwesomeIcon\n          className=\"iconClass\"\n          icon={faFileUpload}\n          color=\"#c2c2c2\"\n          size=\"lg\"\n        />\n        <input\n          type=\"file\"\n          id=\"file\"\n          ref={inputFile}\n          style={{ display: \"none\" }}\n          onChange={(e) => readFile(e)}\n        />\n        <span className=\"buttonHoverText\">Upload</span>\n      </div>\n      <div className=\"Button\" onClick={props.onDownload}>\n        <FontAwesomeIcon\n          className=\"iconClass\"\n          icon={faDownload}\n          color=\"#c2c2c2\"\n          size=\"lg\"\n        />\n        <span className=\"buttonHoverText\">Download</span>\n      </div>\n      <div className=\"Button\" onClick={props.onSave}>\n        <FontAwesomeIcon\n          className=\"iconClass\"\n          icon={faSave}\n          color=\"#c2c2c2\"\n          size=\"lg\"\n        />\n        <span className=\"buttonHoverText\">Browser Save</span>\n      </div>\n\n      <div className=\"Button\" onClick={props.onRead}>\n        <FontAwesomeIcon\n          className=\"iconClass\"\n          icon={faBook}\n          color=\"#c2c2c2\"\n          size=\"lg\"\n        />\n        <span className=\"buttonHoverText\">Reading Mode</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Buttons;\n","import React, { useState, Fragment, useEffect } from \"react\";\nimport { Remarkable } from \"remarkable\";\n\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport Buttons from \"./components/Buttons/Buttons\";\n\nconst App = (props) => {\n  const [mdCode, setMdCode] = useState(\n    \"# New Document \\nType your *markdown* here!\"\n  );\n  const [readMode, setReadMode] = useState(false);\n\n  const mdTextChangeHandler = (e) => {\n    setMdCode(e.target.value);\n  };\n\n  const getRawMarkup = () => {\n    const md = new Remarkable();\n    return { __html: md.render(mdCode) };\n  };\n\n  const onDownloadHandler = () => {\n    console.log(\"download\");\n  };\n\n  const onFileUploadHandler = (text) => {\n    setMdCode(text);\n  };\n\n  const onSaveHandler = () => {\n    alert(\"Saved to the Browser\");\n    localStorage.setItem(\"content\", mdCode);\n  };\n\n  const onReadHandler = () => {\n    setReadMode(!readMode);\n  };\n\n  useEffect(() => {\n    if (localStorage.getItem(\"content\")) {\n      setMdCode(localStorage.getItem(\"content\"));\n    }\n  }, [setMdCode]);\n\n  return (\n    <Fragment>\n      <Header />\n      <Buttons\n        onDownload={onDownloadHandler}\n        onFileUpload={onFileUploadHandler}\n        onSave={onSaveHandler}\n        onRead={onReadHandler}\n      />\n      <div className=\"App\">\n        <div className=\"container\">\n          {readMode ? (\n            \"\"\n          ) : (\n            <div className=\"input\">\n              <div className=\"inputTitle\">Input</div>\n              <textarea\n                className=\"input-text\"\n                onChange={mdTextChangeHandler}\n                value={mdCode}\n              />\n            </div>\n          )}\n          <div className=\"output\">\n            <div className=\"inputTitle\">Markdown</div>\n            <div\n              dangerouslySetInnerHTML={getRawMarkup()}\n              className=\"output-text\"\n            ></div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}